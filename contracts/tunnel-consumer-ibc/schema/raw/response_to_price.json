{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Nullable_Price",
  "anyOf": [
    {
      "$ref": "#/definitions/Price"
    },
    {
      "type": "null"
    }
  ],
  "definitions": {
    "Int64": {
      "description": "An implementation of i64 that is using strings for JSON encoding/decoding, such that the full i64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `i64` to get the value out:\n\n``` # use cosmwasm_std::Int64; let a = Int64::from(258i64); assert_eq!(a.i64(), 258); ```",
      "type": "string"
    },
    "Price": {
      "type": "object",
      "required": [
        "price",
        "signal_id",
        "status",
        "timestamp"
      ],
      "properties": {
        "price": {
          "$ref": "#/definitions/Uint64"
        },
        "signal_id": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "timestamp": {
          "$ref": "#/definitions/Int64"
        }
      },
      "additionalProperties": false
    },
    "Status": {
      "type": "string",
      "enum": [
        "PRICE_STATUS_UNSPECIFIED",
        "PRICE_STATUS_UNKNOWN_SIGNAL_ID",
        "PRICE_STATUS_NOT_READY",
        "PRICE_STATUS_AVAILABLE",
        "PRICE_STATUS_NOT_IN_CURRENT_FEEDS"
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
