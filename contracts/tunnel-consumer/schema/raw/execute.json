{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "update_admin"
      ],
      "properties": {
        "update_admin": {
          "type": "object",
          "required": [
            "admin"
          ],
          "properties": {
            "admin": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_tunnel_config"
      ],
      "properties": {
        "update_tunnel_config": {
          "$ref": "#/definitions/UpdateTunnelConfigMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "UpdateTunnelConfigMsg": {
      "type": "object",
      "required": [
        "channel_id",
        "port_id",
        "tunnel_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "port_id": {
          "type": "string"
        },
        "tunnel_id": {
          "$ref": "#/definitions/Uint64"
        }
      },
      "additionalProperties": false
    }
  }
}
